get.denominator = function(dataframe){
phi.h = nrow(dataframe)
list.category = split(dataframe, dataframe$cate_l2)
denominator = sapply(list.category, function(i){
nrow(i)/phi.h
})
denominator
}
get.overall.relevance = function(dataframe,hour, conds){
p.k = get.denominator(dataframe)
p.ki = get.temporal.impact(dataframe, hour)
cates.list = names(p.k)
p.kj = get.weighted.meteorological.impact(checkin.global, conds)[cates.list]
p.kij = p.ki * p.kj / p.k
list("init"=p.k, "overall"=p.kij)
}
generate.list = function(dataframe, hour, day){
reference.data = dataframe[which(dataframe$hour==hour & dataframe$yearday == day),]
conds = reference.data[1,"conds"]
places.been.to = unique(reference.data$cate_l2)
probs = get.overall.relevance(dataframe, hour, conds)
probs.overall = probs[["overall"]]
probs.overall = probs.overall[probs.overall>0]
places.predicted.overall = names(probs.overall)[order(probs.overall,decreasing=TRUE)]
probs.init = probs[["init"]]
probs.init = probs.init[probs.init>0]
places.predicted.init = names(probs.init)[order(probs.init,decreasing=TRUE)]
#     probs = probs[probs>0]
#     places.predicted = names(probs)[order(probs,decreasing=TRUE)]
list("hour"=hour, "conds"=conds, "real"=places.been.to,
"pred.init" =places.predicted.init,
"pred.overall" =places.predicted.overall)
}
evaluation.vec = function(gen.list, n){
real = gen.list[["real"]]
pred.init = gen.list[["pred.init"]][1:n]
pred.init = pred.init[!is.na(pred.init)]
pred.overall = gen.list[["pred.overall"]][1:n]
pred.overall = pred.overall[!is.na(pred.overall)]
correct.init = 0; correct.overall=0
for(i in  1:length(pred.init)){
prediction = pred.init[i]
if(length(which(real==prediction)))
correct.init = correct.init+1
}
for(i in  1:length(pred.overall)){
prediction = pred.overall[i]
if(length(which(real==prediction)))
correct.overall = correct.overall+1
}
real.count = length(real)
pred.init.count = length(pred.init)
pred.overall.count = length(pred.overall)
c("list.size"=n,"real"=real.count,
"pred.init"=pred.init.count,"cor.init"=correct.init,
"pred.overall"=pred.overall.count,"cor.overall"=correct.overall)
}
checkin.single = read.csv( paste0(basedir, "data\\UserA.csv"),
header=TRUE, sep=",",  na.strings = "none",
colClasses = c("numeric","numeric","factor","factor", "numeric","numeric",
"numeric","character","factor","factor")
)
checkin.single$datetime = strptime( strtrim(checkin.single$localtime,19), format="%Y-%m-%d %H:%M:%S")
## weather data
weather = read.csv( paste0(basedir, "data\\weather.csv"),
header=TRUE, sep=",", na.strings = c("-9999","Unknown"),
colClasses = c("numeric","numeric","numeric","character","numeric","factor",
"numeric","numeric","numeric","numeric","numeric","numeric",
"numeric","numeric")
)
## deal with logical data
weather$fog=as.logical(weather$fog)
weather$rain=as.logical(weather$rain)
weather$snow=as.logical(weather$snow)
weather$thunder=as.logical(weather$thunder)
weather$tornado=as.logical(weather$tornado)
generate.dataframe = function(checkin.global, weather){
## join checkin data with weather data based on timestamps
checkin.global = joindfsbytime(checkin.global, weather)
## deal with time
checkin.global$hour = as.factor(format(checkin.global$datetime,"%H"))
checkin.global$yearday = format(checkin.global$datetime,"%j")
checkin.global$weekday = format(checkin.global$datetime,"%w")
checkin.global$isweekend = as.factor(ifelse( ( checkin.global$weekday>5 ), "Saturday",
ifelse( ( checkin.global$weekday<1 ),"Sunday","Workday")))
## add record for last checkin
# checkin.global = copylastcheckinrec(checkin.global)
checkin.global = checkin.global[complete.cases(checkin.global$conds),]
checkin.global
}
checkin.single = generate.dataframe(checkin.single, weather)
# random sample
all.id = 1:nrow(checkin.single)
size.tests = 50
size.list = 10
sample.id = sample(all.id, size.tests)
performance = data.frame()
for (i in 1:size.tests){
id = sample.id[i]
hour = checkin.single[id,"hour"]
day = checkin.single[id,"yearday"]
# prediction list
pred.list = generate.list(checkin.single, hour, day)
#for(n in 1:size.list){
performance=rbind(performance, evaluation.vec(pred.list,5))
#}
}
colnames(performance)=c("list.size","real","pred.init","cor.init","pred.overall","cor.overall")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
View(performance)
# random sample
all.id = 1:nrow(checkin.single)
size.tests = 200
size.list = 20
sample.id = sample(all.id, size.tests)
performance = data.frame()
for (i in 1:size.tests){
id = sample.id[i]
hour = checkin.single[id,"hour"]
day = checkin.single[id,"yearday"]
# prediction list
pred.list = generate.list(checkin.single, hour, day)
for(n in 1:size.list){
performance=rbind(performance, evaluation.vec(pred.list,5))
}
}
colnames(performance)=c("list.size","real","pred.init","cor.init","pred.overall","cor.overall")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
View(precision.recall)
View(precision.recall)
# random sample
all.id = 1:nrow(checkin.single)
size.tests = 200
size.list = 20
sample.id = sample(all.id, size.tests)
performance = data.frame()
for (i in 1:size.tests){
id = sample.id[i]
hour = checkin.single[id,"hour"]
day = checkin.single[id,"yearday"]
# prediction list
pred.list = generate.list(checkin.single, hour, day)
for(n in 1:size.list){
performance=rbind(performance, evaluation.vec(pred.list,n))
}
}
colnames(performance)=c("list.size","real","pred.init","cor.init","pred.overall","cor.overall")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
View(precision.recall)
colnames(performance)=c("list.size","real","pred.overall","cor.overall","pred.init","cor.init")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
View(precision.recall)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
rbind(c("n"=i[1,"list.size"],"y"=precision.init,"type"="precision.init"),
c("n"=i[1,"list.size"],"y"=recall.init,"type"="recall.init"),
c("n"=i[1,"list.size"],"y"=precision.overall,"type"="precision.overall"),
c("n"=i[1,"list.size"],"y"=recall.overall,"type"="recall.overall"))
})
precision.recall=as.data.frame(t(precision.recall))
View(precision.recall)
precision.recall = sapply(performance.by.size, function(i){
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
rbind(c("n"=i[1,"list.size"],"y"=precision.init,"type"="precision.init"),
c("n"=i[1,"list.size"],"y"=recall.init,"type"="recall.init"),
c("n"=i[1,"list.size"],"y"=precision.overall,"type"="precision.overall"),
c("n"=i[1,"list.size"],"y"=recall.overall,"type"="recall.overall"))
})
rbind(c("n"=i[1,"list.size"],"y"=precision.init,"type"="precision.init"),
c("n"=i[1,"list.size"],"y"=recall.init,"type"="recall.init"),
c("n"=i[1,"list.size"],"y"=precision.overall,"type"="precision.overall"),
c("n"=i[1,"list.size"],"y"=recall.overall,"type"="recall.overall"))
?matrix
precision.recall = sapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
"n"=n,"y"=recall.init,"type"="recall.init",
"n"=n,"y"=precision.overall,"type"="precision.overall",
"n"=n,"y"=recall.overall,"type"="recall.overall"),
nrow=4, ncol=3, byrow = TRUE)
})
precision.recall = lapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
"n"=n,"y"=recall.init,"type"="recall.init",
"n"=n,"y"=precision.overall,"type"="precision.overall",
"n"=n,"y"=recall.overall,"type"="recall.overall"),
nrow=4, ncol=3, byrow = TRUE)
})
precision.recall[[1]]
precision.recall = do.call("rbind",precision.recall)
View(precision.recall)
precision.recall = lapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
"n"=n,"y"=recall.init,"type"="recall.init",
"n"=n,"y"=precision.overall,"type"="precision.overall",
"n"=n,"y"=recall.overall,"type"="recall.overall"),
nrow=4, ncol=3, byrow = TRUE)
})
precision.recall = as.data.frame(do.call("rbind",precision.recall))
View(precision.recall)
ggplot(data=precision.recall, aes(x=n, y=y, group = type, colour = type)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
precision.recall = lapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
matrix(c("n"=n,"perf"=precision.init,"type"="precision.init",
"n"=n,"perf"=recall.init,"type"="recall.init",
"n"=n,"perf"=precision.overall,"type"="precision.overall",
"n"=n,"perf"=recall.overall,"type"="recall.overall"),
nrow=4, ncol=3, byrow = TRUE)
})
precision.recall = as.data.frame(do.call("rbind",precision.recall))
ggplot(data=precision.recall, aes(x=n, y=perf, group = type, colour = type)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
View(precision.recall)
ggplot(data=precision.recall, aes(x=V1, y=V2, group = V3, colour = V3)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ggplot(data=precision.recall, aes(x=as.numeric(V1), y=as.numeric(V2), group = V3, colour = V3)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
precision.recall$V1=as.numeric(precision.recall$V1)
precision.recall$V2=as.numeric(precision.recall$V2)
View(precision.recall)
precision.recall = lapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
#c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
#  "precision.overall"=precision.overall,"recall.overall"=recall.overall)
matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
"n"=n,"y"=recall.init,"type"="recall.init",
"n"=n,"y"=precision.overall,"type"="precision.overall",
"n"=n,"y"=recall.overall,"type"="recall.overall"),
nrow=4, ncol=3, byrow = TRUE)
})
precision.recall = as.data.frame(do.call("rbind",precision.recall))
View(precision.recall)
precision.recall = sapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
#     matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
#           "n"=n,"y"=recall.init,"type"="recall.init",
#           "n"=n,"y"=precision.overall,"type"="precision.overall",
#           "n"=n,"y"=recall.overall,"type"="recall.overall"),
#           nrow=4, ncol=3, byrow = TRUE)
})
View(precision.recall)
precision.recall=as.data.frame(t(precision.recall))
View(precision.recall)
?melt
melt(precision.recall)
library("reshape2")
melt(precision.recall)
melt(precision.recall,id.vars="n")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.init"=precision.init,"recall.init"=recall.init,
"precision.overall"=precision.overall,"recall.overall"=recall.overall)
#     matrix(c("n"=n,"y"=precision.init,"type"="precision.init",
#           "n"=n,"y"=recall.init,"type"="recall.init",
#           "n"=n,"y"=precision.overall,"type"="precision.overall",
#           "n"=n,"y"=recall.overall,"type"="recall.overall"),
#           nrow=4, ncol=3, byrow = TRUE)
})
# precision.recall = as.data.frame(do.call("rbind",precision.recall))
# precision.recall$V1=as.numeric(precision.recall$V1)
# precision.recall$V2=as.numeric(precision.recall$V2)
precision.recall=as.data.frame(t(precision.recall))
precision.recall= melt(precision.recall,id.vars="n")
View(precision.recall)
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ppi <- 300
png(paste0(basedir,"img\\precision.recall.png"), width = 8*ppi, height = 6*ppi, res=ppi)
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.initial"=precision.init,"recall.initial"=recall.init,
"precision.contextualized"=precision.overall,"recall.contextualized"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
precision.recall= melt(precision.recall,id.vars="n")
ppi <- 300
png(paste0(basedir,"img\\precision.recall.png"), width = 8*ppi, height = 6*ppi, res=ppi)
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
ppi <- 300
png(paste0(basedir,"img\\precision.recall.png"), width = 6*ppi, height = 4*ppi, res=ppi)
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
ppi <- 300
png(paste0(basedir,"img\\precision.recall.png"), width = 8*ppi, height = 4*ppi, res=ppi)
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
knit("experiment-IJGI.Rmd")
library(knitr)
knit("experiment-IJGI.Rmd")
setwd("D:\\GitRepos\\drafts")
knit("experiment-IJGI.Rmd")
setwd("D:\\GitRepos\\work\\records")
knit("experiment-IJGI.Rmd")
performance.by.size = split(performance,performance$list.size)
precision.recall = sapply(performance.by.size, function(i){
n = i[1,"list.size"]
precision.init = sum(i$cor.init) / sum(i$pred.init)
recall.init = sum(i$cor.init) / sum(i$real)
precision.overall = sum(i$cor.overall) / sum(i$pred.overall)
recall.overall = sum(i$cor.overall) / sum(i$real)
c("n"=i[1,"list.size"],"precision.priori"=precision.init,"recall.priori"=recall.init,
"precision.contextualized"=precision.overall,"recall.contextualized"=recall.overall)
})
precision.recall=as.data.frame(t(precision.recall))
precision.recall= melt(precision.recall,id.vars="n")
ppi <- 300
png(paste0(basedir,"img\\plot_freq_category.png"), width = 8*ppi, height = 4*ppi, res=ppi)
# plot
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
View(precision.recall)
ppi <- 300
png(paste0(basedir,"img\\plot_precision.recall.png"), width = 8*ppi, height = 4*ppi, res=ppi)
# plot
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
L_category = split(checkin.global, checkin.global$cate_l1)
DF_date_hour_category = data.frame()
temp = lapply(L_category, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_l1"])
DF_date_hour_category <<- rbind(DF_date_hour_category,df)
})
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
## plot
ppi <- 300
png(paste0(basedir,"img\\plot_precision.recall.png"), width = 8*ppi, height = 4*ppi, res=ppi)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
rm(temp)
dev.off()
ppi <- 300
png(paste0(basedir,"img\\plot_freq_category.png.png"), width = 8*ppi, height = 6*ppi, res=ppi)
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
rm(temp)
dev.off()
ppi <- 300
png(paste0(basedir,"img\\plot_precision_recall.png"), width = 8*ppi, height = 4*ppi, res=ppi)
# plot
ggplot(data=precision.recall, aes(x=n, y=value, group = variable, colour = variable)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
dev.off()
View(performance)
sum(performance$real)
sum(performance$real)/4000
$$P_{u}^{*} (C=k|W=j)= w_{j}*[P_{u}(C=k|W=j)-\bar P_{u}]+\bar P_{u}$$
Thanks! Yes, we totally agree that the use of context should not just lead to UI customization. It is also not our intent way to use context in our previous draft. However, the utilization might have been blurred since the old draft covered too wide topics. In the revised version, you can notice the use of 'context' had led to other aspects (e.g. relevance evaluation) other than UI customization, since we have completely removed the visualization part.
library(scales)
library(reshape2)
library(ggplot2)
library(TSA)
library(ca)
source("D:\\GitRepos\\work\\fun\\mathmatrixcal.R")
source("D:\\GitRepos\\work\\fun\\TableOperations.R")
source("D:\\GitRepos\\work\\fun\\GenerateStatsDataFrame.R")
basedir = "D:\\Experiments\\R\\"
load("D:\\Experiments\\R\\data\\checkin_global_0813.Rda")
L_category = split(checkin.global, checkin.global$cate_l1)
DF_date_hour_category = data.frame()
temp = lapply(L_category, function(i){
df = stats_by_date_hour(i, category = i[1,"cate_l1"])
DF_date_hour_category <<- rbind(DF_date_hour_category,df)
})
L_date_hour_category=split(DF_date_hour_category,DF_date_hour_category$cate_l1)
## plot
par(mfrow=c(3,4))
temp = lapply(seq_along(L_date_hour_category), function(i){
fre = spec.pgram(L_date_hour_category[[i]]$prop, plot=FALSE)
plot(fre[["freq"]][1:400], fre[["spec"]][1:400],
type="l", main= names(L_date_hour_category[i]),
xlab="Frequency", ylab="Spectrum")
})
rm(temp)
DF_hour_category = data.frame()
temp = lapply(L_category, function(i){
df = stats_checkin_by_hour(i, category = i[1,"cate_l1"])
DF_hour_category <<- rbind(DF_hour_category,df)
})
rm(temp)
## plot
ggplot(DF_hour_category, aes(x=hour,y=prop)) +
geom_bar(stat="identity") +
xlab("") +
facet_wrap(~cate_l1, ncol=4, nrow=3) +
coord_cartesian(ylim = c(0,0.13)) +
scale_y_continuous(labels  = percent) +
scale_x_discrete(breaks=levels(DF_hour_category$hour),
labels=c("0","","","3","","","6","","","9","","","12","","","15","","","18","","","21","","23"))
