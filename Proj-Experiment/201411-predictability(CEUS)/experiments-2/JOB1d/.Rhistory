cramer.mat[3,4] = summary(assocstats(xtabs(~isweekend + conds,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[2,1] = summary(assocstats(xtabs(~cate_l2 + ugrid.id,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[2,2] = summary(assocstats(xtabs(~cate_l1 + ugrid.id,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[2,3] = summary(assocstats(xtabs(~hour + ugrid.id,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[2,4] = summary(assocstats(xtabs(~isweekend + ugrid.id,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[2,5] = summary(assocstats(xtabs(~conds + ugrid.id,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,1] = summary(assocstats(xtabs(tweight~cate_l2 + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,2] = summary(assocstats(xtabs(tweight~cate_l1 + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,3] = summary(assocstats(xtabs(tweight~hour + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,4] = summary(assocstats(xtabs(tweight~isweekend + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,5] = summary(assocstats(xtabs(tweight~conds + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
cramer.mat[1,6] = summary(assocstats(xtabs(tweight~ugrid.id + last.cate_l1,
data = checkin.active.in.grids)+0.0001))$object$cramer
colnames(cramer.mat)=c("L2","L1","hour","weekend","conds","grid","last.cate")
rownames(cramer.mat)=c("last.cate","grid","conds","weekend","hour","L1","L2")
cramer.melt = melt(t(cramer.mat))
cramer.melt.nona = cramer.melt[!is.na(cramer.melt$value),]
cramer.image <- ggplot(cramer.melt, aes(Var1,Var2)) +
geom_point(aes(size = value),color = "steelblue",alpha=0.7 )  +
annotate("text", x = cramer.melt.nona$Var1,
y = cramer.melt.nona$Var2,
label=format(cramer.melt.nona$value,digits=1),
size=sqrt(cramer.melt.nona$value+0.05)*5) +
annotate("text", label = c("Category\n Level 2","Category\n Level 1","Temporal\n Hour",
"Temporal\n Weekday","Weather\n Condition","Spatial\n Grid","Last\n Place"),
x = c("L2","L1","hour","weekend","conds","grid","last.cate"),
y = c("L2","L1","hour","weekend","conds","grid","last.cate"),
size = 1.8) +
geom_path(data=compose.grids.line(corners=c("left"=0.5,"right"=7.5,"top"=7.5,"bottom"=0.5),cols=7,rows=7),
aes(x=x, y=y,group=group),size=.1,color="grey90") +
theme(axis.title = element_blank(),legend.position="none",
axis.text=element_blank(),axis.ticks = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.margin=unit(c(0,.05,.05,.05),"npc"))
png(paste0(basedir,"img\\Agile\\agile_map5.correlation.png"), width = 3*ppi, height = 2*ppi, res=ppi,bg = "transparent")
cramer.image
dev.off()
dendrogram.grid = as.dendrogram(hclust(dist(t(tabs.grid.p))))
h = 0.7; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
tabs.grid = xtabs(data=checkin.active.in.grids,~cate_l1+ugrid.id)
tabs.grid.p = apply(tabs.grid,2,function(x){x/sum(x)})
dendrogram.grid = as.dendrogram(hclust(dist(t(tabs.grid.p))))
h = 0.7; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.8; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.85; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.9; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.8; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.85; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
h = 0.9; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
grid.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
grid.cls <<- rbind(grid.cls,
data.frame("ugrid.id"=levels(checkin.active.in.grids$ugrid.id)[nodes],
"grid.cid"=rep(i,length(nodes)))  )
NA
})
checkin.active.in.grids = merge(x=checkin.active.in.grids,y=grid.cls)
checkin.active.in.grids$grid.cid = as.factor(checkin.active.in.grids$grid.cid)
png(paste0(basedir,"img\\Agile\\agile_map9.sp.cls1.png"), width = 5*ppi, height = 4.5*ppi, res=ppi,bg = "transparent")
data=unique(checkin.active.in.grids[order(checkin.active.in.grids$lat.x),c("col.id","row.id","grid.cid")])
ggplot(data=data, aes(x=col.id,y=row.id)) +
geom_tile(aes(fill=as.factor(grid.cid)),color="white")+
annotate("text", label = data$grid.cid,
x = data$col.id, y = data$row.id,
size = 3) +
theme(legend.position="none",
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank(),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
dev.off()
png(paste0(basedir,"img\\Agile\\agile_map9.sp.cls1.png"), width = 5*ppi, height = 4.5*ppi, res=ppi,bg = "transparent")
ggplot(data=data, aes(x=col.id,y=row.id)) +
geom_tile(aes(fill=as.factor(grid.cid)),color="white")+
annotate("text", label = data$grid.cid,
x = data$col.id, y = data$row.id,
size = 2) +
theme(legend.position="none",
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank(),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
dev.off()
data=unique(checkin.active.in.grids[,c("col.id","row.id","grid.cid")])
png(paste0(basedir,"img\\Agile\\agile_map9.sp.cls1.png"), width = 5*ppi, height = 4.5*ppi, res=ppi,bg = "transparent")
ggplot(data=data, aes(x=col.id,y=row.id)) +
geom_tile(aes(fill=as.factor(grid.cid)),color="white")+
annotate("text", label = data$grid.cid,
x = data$col.id, y = data$row.id,
size = 2) +
theme(legend.position="none",
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank(),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
dev.off()
h = 0.95; clusters =cut(dendrogram.grid,h)$lower; nclusters=length(clusters)
grid.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
grid.cls <<- rbind(grid.cls,
data.frame("ugrid.id"=levels(checkin.active.in.grids$ugrid.id)[nodes],
"grid.cid"=rep(i,length(nodes)))  )
NA
})
checkin.active.in.grids = merge(x=checkin.active.in.grids,y=grid.cls)
checkin.active.in.grids$grid.cid = as.factor(checkin.active.in.grids$grid.cid)
cols=40;rows=36
grids = compose.grids(corners, cols, rows)
col.size = (corners["right"]-corners["left"])/cols
row.size = (corners["top"]-corners["bottom"])/rows
# category.in.grids = data.frame("cate_l1"= checkin.active$cate_l1,
#                                "cate_l2"= checkin.active$cate_l2,
#                                "col.id" = ceiling( (checkin.active$lon.x-corners["left"]) / col.size ),
#                                "row.id" = ceiling( (checkin.active$lat.x-corners["bottom"]) / row.size )
#                                )
# category.in.grids$uid = factor(paste0(category.in.grids$row.id, category.in.grids$col.id ),
#                                levels = levels(grids$uid) )
# merge category.in.grids with checkin.active
checkin.active.in.grids = checkin.active
checkin.active.in.grids$col.id = ceiling( (checkin.active$lon.x-corners["left"]) / col.size )
checkin.active.in.grids$row.id = ceiling( (checkin.active$lat.x-corners["bottom"]) / row.size )
checkin.active.in.grids$grid.id =
factor(paste(formatC(checkin.active.in.grids$row.id, width = 4, flag = 0),
formatC(checkin.active.in.grids$col.id, width = 4, flag = 0), sep="_" ),
levels = levels(grids$uid) )
checkin.active.in.grids$ugrid.id = factor(checkin.active.in.grids$grid.id)
checkin.active.in.grids = merge(x=checkin.active.in.grids,y=grid.cls)
checkin.active.in.grids$grid.cid = as.factor(checkin.active.in.grids$grid.cid)
data=unique(checkin.active.in.grids[,c("col.id","row.id","grid.cid")])
png(paste0(basedir,"img\\Agile\\agile_map9.sp.cls1.png"), width = 5*ppi, height = 4.5*ppi, res=ppi,bg = "transparent")
ggplot(data=data, aes(x=col.id,y=row.id)) +
geom_tile(aes(fill=as.factor(grid.cid)),color="white")+
annotate("text", label = data$grid.cid,
x = data$col.id, y = data$row.id,
size = 2) +
theme(legend.position="none",
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
axis.title=element_blank(),axis.text=element_blank(),axis.ticks=element_blank(),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
dev.off()
dendrogram.hour = as.dendrogram(hclust(dist(t(tabs.hour.p))))
tabs.hour = xtabs(data=checkin.active.in.grids,~cate_l1+hour)
tabs.hour.p = apply(tabs.hour,2,function(x){x/sum(x)})
dendrogram.hour = as.dendrogram(hclust(dist(t(tabs.hour.p))))
h = 0.95; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
h = 0.8; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
h = 0.6; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
h = 0.4; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
h = 0.3; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$ugrid.id)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
hour.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$ugrid.id)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
View(hour.cls)
hour.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$hour)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
View(hour.cls)
h = 0.35; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$hour)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
hour.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$hour)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
View(hour.cls)
h = 0.38; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
h = 0.32; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
hour.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$hour)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
View(hour.cls)
h = 0.3; clusters =cut(dendrogram.hour,h)$lower; nclusters=length(clusters)
hour.cls = data.frame()
test = sapply(1:nclusters, function(i){
if(!is.leaf(clusters[[i]])) nodes = unlist(clusters[[i]])
else nodes = as.numeric(clusters[[i]])
hour.cls <<- rbind(hour.cls,
data.frame("hour"=levels(checkin.active.in.grids$hour)[nodes],
"hour.cid"=rep(i,length(nodes)))  )
NA
})
checkin.active.in.grids = merge(x=checkin.active.in.grids,y=hour.cls)
checkin.active.in.grids$hour.cid = as.factor(checkin.active.in.grids$hour.cid)
library(nnet)
tmodel1<-multinom(cate_l1~ hour.cid+grid.cid+last.cate_l1+hour.cid:isweekend+grid.cid:last.cate_l1,
data=checkin.active.in.grids,maxit = 1000)
tmodel1<-multinom(cate_l1~ hour.cid+grid.cid+isweekend+last.cate_l1,
data=checkin.active.in.grids,maxit = 1000)
# investigate into the coefficient
tsummary1 = summary(tmodel1)
z1 = tsummary1$coefficients/tsummary1$standard.errors
p1 = (1 - pnorm(abs(z1), 0, 1)) * 2
image<-ggplot(melt(p1), aes(Var2,Var1)) +
geom_tile(aes(fill = sqrt(value)), colour = "white")+
scale_fill_gradient2(name="p value",midpoint = 0.2, high="red",low="green",
breaks=c(0,sqrt(0.05),sqrt(0.1),sqrt(0.25),sqrt(1)),
labels=c(0,0.05,0.1,0.25,1))+
theme(axis.title = element_blank(),legend.position="top",
axis.text.y=element_text(size=6,color="black"),
axis.text.x  = element_text(angle=45, vjust=1, hjust=1,size=5,color="black"),
legend.title = element_text( size=6),legend.text = element_text(angle=45,size = 6),
#           axis.text=element_blank(),
panel.background = element_blank(), plot.background = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
top <-ggplot(melt(p1))+geom_boxplot(aes(Var2,value),outlier.size=.5,outlier.colour="grey")+
scale_y_sqrt(breaks=c(0,0.05,0.1,0.25,1),labels=c(0,0.05,0.1,0.25,1))+
theme(axis.title = element_blank(),
axis.text.x=element_blank(),axis.text.y=element_text(size=5,color="black"),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
right<-ggplot(melt(p1))+geom_boxplot(aes(Var1,value),outlier.size=.5,outlier.colour="grey")+
scale_y_sqrt( breaks=c(0,0.05,0.1,0.25,1),labels=c(0,0.05,0.1,0.25,1))+
theme(axis.title = element_blank(),
axis.text.y=element_blank(),axis.text.x=element_text(size=5,color="black",angle=35, vjust=1,hjust=1),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))+
coord_flip()
empty <- ggplot()+geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
png(paste0(basedir,"img\\Agile\\agile_map10.p2.png"), width =5*ppi, height = 3.5*ppi, res=ppi,bg = "transparent")
image
dev.off()
png(paste0(basedir,"img\\Agile\\agile_map10.p1.png"), width = 5*ppi, height = 3.5*ppi, res=ppi,bg = "transparent")
grid.arrange(empty,top, empty, empty, empty,right,empty,empty, empty, ncol=3, nrow=3,
widths=c(0.1,4, 0.9), heights=c(0.9,1.5,0.6))
dev.off()
prediction = apply(tmodel1$fitted.values, 1, FUN=function(i)which(i==max(i)))
real=checkin.active.in.grids$cate_l1
comparison = data.frame("real"=real,"prediction"=levels(real)[prediction])
comparison$correct = ifelse(comparison$prediction==comparison$real,1,0)
sum(comparison$correct)/nrow(comparison)
rediduals = tmodel1$residuals
png(paste0(basedir,"img\\Agile\\agile_map11.residuals.png"), width = 6*ppi, height = 3*ppi, res=ppi,bg = "white")
ggplot(melt(rediduals))+geom_boxplot(aes(Var2,value),outlier.size=.5,outlier.colour="grey")+
ylab("Residuals")+
#     scale_y_sqrt(breaks=c(0,0.05,0.1,0.25,1),labels=c(0,0.05,0.1,0.25,1))+
theme(#axis.title = element_blank(),
axis.title.x = element_blank(),
axis.text.y=element_text(size=6,color="black"),
axis.text.x  = element_text(angle=30, vjust=1, hjust = 1,size=6,color="black"),
plot.margin=unit(c(.05,.05,.05,.05),"npc"))
dev.off()
?multinom
multinom
?summary
summary
showMethods("summary")
summary.multinom
?summary
?summary.glm
summary.glm
summary.multinom
?summary.multinom
?summary.nnet
?multinom
multinom
tmodel1
tmodel2<-multinom(cate_l1~ hour.cid+grid.cid, Hess=True,
data=checkin.active.in.grids,maxit = 1000)
tmodel2<-multinom(cate_l1~ last.cate_l1, Hess=Tru
data=checkin.active.in.grids,maxit = 1000)
tmodel2<-multinom(cate_l1~ last.cate_l1, Hess=True,
data=checkin.active.in.grids,maxit = 1000)
data("Fishing", package = "mlogit")
fishing.mu <- multinom(mode ~ income, data = Fishing)
sum.fishing <- summary(fishing.mu) # gives a table of outcomes by covariates for coef and SE
str(sum.fishing)
data("Fishing", package = "mlogit")
fishing.mu <- multinom(mode ~ income, data = Fishing)
fishing.mu2 <- multinom(mode ~ income, data = Fishing, Hess=TRUE)
fishing.？
fishing.mu2$Hessian
summary(fishing.mu2)$std.error
str(sum.fishing)
# now get the p values by first getting the t values
pt(abs(sum.fishing$coefficients / sum.fishing$standard.errors
)
)
summary
standardGeneric("summary")
standardGeneric
showMethods("summary")
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
str(proc.time() - ptm)
mem_change(for (i in 1:50) mad(stats::runif(500)))
library(pryr)
install.packages("pryr")
library(pryr)
mem_change(for (i in 1:50) mad(stats::runif(500)))
mem_change(multinom(mode ~ income, data = Fishing))
mem_change(fishing.mu=multinom(mode ~ income, data = Fishing))
mem_change(fishing.mu<-multinom(mode ~ income, data = Fishing))
object_size(fishing.mu)
rm(fishing.mu)
mem_change(multinom(mode ~ income, data = Fishing))
object_size(fishing.mu)
mem_change(fishing.mu<-multinom(mode ~ income, data = Fishing))
object_size(fishing.mu)
mem_change(summary(fishing.mu))
tmodel.test2<-multinom(cate_l1~ last.cate_l1 + hour.cid,
)
## test running time
running.time=data.frame()
ptm <- proc.time()
tmodel.test1<-multinom(cate_l1~ last.cate_l1,
data=checkin.active.in.grids,maxit = 1000)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
# investigate into the coefficient
tsummary.test1 = summary(tmodel.test1)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
rm(tmodel.test1,tsummary.test1)
tmodel.test2<-multinom(cate_l1~ last.cate_l1 + hour.cid,
data=checkin.active.in.grids,maxit = 1000)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
# investigate into the coefficient
tsummary.test2 = summary(tmodel.test2)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
rm(tmodel.test2,tsummary.test2)
tmodel.test3<-multinom(cate_l1~ hour.cid+grid.cid,
data=checkin.active.in.grids,maxit = 1000)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
# investigate into the coefficient
tsummary.test3 = summary(tmodel.test3)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
rm(tmodel.test3,tsummary.test3)
tmodel.test4<-multinom(cate_l1~ hour.cid+grid.cid+last.cate_l1,
data=checkin.active.in.grids,maxit = 1000)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
# investigate into the coefficient
tsummary.test4 = summary(tmodel.test4)
running.time <- rbind(running.time,proc.time()- ptm )
ptm <- proc.time()
rm(tmodel.test4,tsummary.test4)
View(running.time)
View(grid.cls)
setwd("D:\\GitRepos\\work\\records\\experiments-2\\JOB1a")
library(nnet)
source("../grids.R")
# #################### configurations ########################
cols = 40
rows = 36
ncls.hour = 6
ncls.grid = 14
ncls.ia.h.w = 10
ncls.ia.g.l = 20
regression.formula = paste("cate_l1 ~", "hour.cid",
"+ ugrid.id.cid")
nparas = (ncls.hour-1) + (ncls.grid-1)
# #############################################################
# #############################################################
load("../checkin_active.Rda")
print("successfully load the data")
# dealing with the dataframe
ptm <- proc.time()
checkin.active.in.grids = arrange.in.grids(checkin.active, cols, rows)
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "hour", ncls.hour)
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "ugrid.id", ncls.grid)
# report time duration
print(paste("Data preparation finished after",proc.time()- ptm,"seconds"))
ptm <- proc.time()
load("tmodel1.Rda")
prediction = apply(tmodel1$fitted.values, 1, FUN=function(i)which(i==max(i)))
real=checkin.active.in.grids$cate_l1
comparison = data.frame("real"=real,"prediction"=levels(real)[prediction])
comparison$correct = ifelse(comparison$prediction==comparison$real,1,0)
rate=sum(comparison$correct)/nrow(comparison)
print(paste(sum(comparison$correct), "correct predictions out of",
nrow(comparison),". Rate:",rate))
View(comparison)
summary(comparison)
str(comparison$prediction)
str(comparison$real)
table(prediction)
prediction[1:10]
levels(real)[prediction]
levels(real)[prediction[1:10]]
prediction[1:10]
prediction[1:10]
prediction[1:20]
predict(tmodel1,data=("hour.cid"=6,"ugrid.id.cid"=6))
predict(tmodel1,data=data.frame("hour.cid"=6,"ugrid.id.cid"=6))
predicts=predict(tmodel1)
predicts[1:10]
summary(predicts)
summary(prediction)
table(prediction)
table(predicts)
prediction = predict(tmodels)
prediction = predict(tmodel1)
real=checkin.active.in.grids$cate_l1
# comparison = data.frame("real"=real,"prediction"=levels(real)[prediction])
comparison = data.frame("real"=real,"prediction"=prediction)
comparison$correct = ifelse(comparison$prediction==comparison$real,1,0)
rate=sum(comparison$correct)/nrow(comparison)
print(paste(sum(comparison$correct), "correct predictions out of",
nrow(comparison),". Rate:",rate))
setwd("D:\\GitRepos\\work\\records\\experiments-2\\JOB1d")
library(nnet)
source("../grids.R")
# #################### configurations ########################
cols = 40
rows = 36
ncls.hour = 6
ncls.grid = 14
ncls.ia.h.w = 10
ncls.ia.g.l = 20
regression.formula = paste("cate_l1 ~", "hour.cid",
"+ ugrid.id.cid",
"+ isweekend",
"+ last.cate_l1",
"+ hour_isweekend.cid",
"+ grid_last.cid")
# #############################################################
# #############################################################
load("../checkin_active.Rda")
print("successfully load the data")
# dealing with the dataframe
ptm <- proc.time()
checkin.active.in.grids = arrange.in.grids(checkin.active, cols, rows)
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "hour", ncls.hour)
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "ugrid.id", ncls.grid)
checkin.active.in.grids$hour_isweekend = as.factor(
paste(checkin.active.in.grids$hour, checkin.active.in.grids$isweekend))
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "hour_isweekend", ncls.ia.h.w)
checkin.active.in.grids$grid_last = as.factor(
paste(checkin.active.in.grids$ugrid.id,
checkin.active.in.grids$last_cate_l1))
checkin.active.in.grids = reduce.ranks.by.dendrogram(
checkin.active.in.grids, "cate_l1", "grid_last", ncls.ia.g.l)
# report time duration
print(paste("Data preparation finished after",proc.time()- ptm,"seconds"))
ptm <- proc.time()
load("tmodel1.Rda")
prediction = predict(tmodel1)
real=checkin.active.in.grids$cate_l1
# comparison = data.frame("real"=real,"prediction"=levels(real)[prediction])
comparison = data.frame("real"=real,"prediction"=prediction)
comparison$correct = ifelse(comparison$prediction==comparison$real,1,0)
rate=sum(comparison$correct)/nrow(comparison)
print(paste(sum(comparison$correct), "correct predictions out of",
nrow(comparison),". Rate:",rate))
